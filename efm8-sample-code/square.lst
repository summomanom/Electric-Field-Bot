0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Fri Mar 30 16:37:04 2018
0000              5   ;--------------------------------------------------------
                  5   $name square
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _Timer0_ISR
0000             28            public _Timer2_ISR
0000             29            public __c51_external_startup
0000             30            public _flag
0000             31            public _command
0000             32            public _counter2
0000             33            public _counter
0000             34   ;--------------------------------------------------------
0000             35   ; Special Function Registers
0000             36   ;--------------------------------------------------------
0000             37   _ACC            DATA 0xe0
0000             38   _ADC0ASAH       DATA 0xb6
0000             39   _ADC0ASAL       DATA 0xb5
0000             40   _ADC0ASCF       DATA 0xa1
0000             41   _ADC0ASCT       DATA 0xc7
0000             42   _ADC0CF0        DATA 0xbc
0000             43   _ADC0CF1        DATA 0xb9
0000             44   _ADC0CF2        DATA 0xdf
0000             45   _ADC0CN0        DATA 0xe8
0000             46   _ADC0CN1        DATA 0xb2
0000             47   _ADC0CN2        DATA 0xb3
0000             48   _ADC0GTH        DATA 0xc4
0000             49   _ADC0GTL        DATA 0xc3
0000             50   _ADC0H          DATA 0xbe
0000             51   _ADC0L          DATA 0xbd
0000             52   _ADC0LTH        DATA 0xc6
0000             53   _ADC0LTL        DATA 0xc5
0000             54   _ADC0MX         DATA 0xbb
0000             55   _B              DATA 0xf0
0000             56   _CKCON0         DATA 0x8e
0000             57   _CKCON1         DATA 0xa6
0000             58   _CLEN0          DATA 0xc6
0000             59   _CLIE0          DATA 0xc7
0000             60   _CLIF0          DATA 0xe8
0000             61   _CLKSEL         DATA 0xa9
0000             62   _CLOUT0         DATA 0xd1
0000             63   _CLU0CF         DATA 0xb1
0000             64   _CLU0FN         DATA 0xaf
0000             65   _CLU0MX         DATA 0x84
0000             66   _CLU1CF         DATA 0xb3
0000             67   _CLU1FN         DATA 0xb2
0000             68   _CLU1MX         DATA 0x85
0000             69   _CLU2CF         DATA 0xb6
0000             70   _CLU2FN         DATA 0xb5
0000             71   _CLU2MX         DATA 0x91
0000             72   _CLU3CF         DATA 0xbf
0000             73   _CLU3FN         DATA 0xbe
0000             74   _CLU3MX         DATA 0xae
0000             75   _CMP0CN0        DATA 0x9b
0000             76   _CMP0CN1        DATA 0x99
0000             77   _CMP0MD         DATA 0x9d
0000             78   _CMP0MX         DATA 0x9f
0000             79   _CMP1CN0        DATA 0xbf
0000             80   _CMP1CN1        DATA 0xac
0000             81   _CMP1MD         DATA 0xab
0000             82   _CMP1MX         DATA 0xaa
0000             83   _CRC0CN0        DATA 0xce
0000             84   _CRC0CN1        DATA 0x86
0000             85   _CRC0CNT        DATA 0xd3
0000             86   _CRC0DAT        DATA 0xcb
0000             87   _CRC0FLIP       DATA 0xcf
0000             88   _CRC0IN         DATA 0xca
0000             89   _CRC0ST         DATA 0xd2
0000             90   _DAC0CF0        DATA 0x91
0000             91   _DAC0CF1        DATA 0x92
0000             92   _DAC0H          DATA 0x85
0000             93   _DAC0L          DATA 0x84
0000             94   _DAC1CF0        DATA 0x93
0000             95   _DAC1CF1        DATA 0x94
0000             96   _DAC1H          DATA 0x8a
0000             97   _DAC1L          DATA 0x89
0000             98   _DAC2CF0        DATA 0x95
0000             99   _DAC2CF1        DATA 0x96
0000            100   _DAC2H          DATA 0x8c
0000            101   _DAC2L          DATA 0x8b
0000            102   _DAC3CF0        DATA 0x9a
0000            103   _DAC3CF1        DATA 0x9c
0000            104   _DAC3H          DATA 0x8e
0000            105   _DAC3L          DATA 0x8d
0000            106   _DACGCF0        DATA 0x88
0000            107   _DACGCF1        DATA 0x98
0000            108   _DACGCF2        DATA 0xa2
0000            109   _DERIVID        DATA 0xad
0000            110   _DEVICEID       DATA 0xb5
0000            111   _DPH            DATA 0x83
0000            112   _DPL            DATA 0x82
0000            113   _EIE1           DATA 0xe6
0000            114   _EIE2           DATA 0xf3
0000            115   _EIP1           DATA 0xbb
0000            116   _EIP1H          DATA 0xee
0000            117   _EIP2           DATA 0xed
0000            118   _EIP2H          DATA 0xf6
0000            119   _EMI0CN         DATA 0xe7
0000            120   _FLKEY          DATA 0xb7
0000            121   _HFO0CAL        DATA 0xc7
0000            122   _HFO1CAL        DATA 0xd6
0000            123   _HFOCN          DATA 0xef
0000            124   _I2C0ADM        DATA 0xff
0000            125   _I2C0CN0        DATA 0xba
0000            126   _I2C0DIN        DATA 0xbc
0000            127   _I2C0DOUT       DATA 0xbb
0000            128   _I2C0FCN0       DATA 0xad
0000            129   _I2C0FCN1       DATA 0xab
0000            130   _I2C0FCT        DATA 0xf5
0000            131   _I2C0SLAD       DATA 0xbd
0000            132   _I2C0STAT       DATA 0xb9
0000            133   _IE             DATA 0xa8
0000            134   _IP             DATA 0xb8
0000            135   _IPH            DATA 0xf2
0000            136   _IT01CF         DATA 0xe4
0000            137   _LFO0CN         DATA 0xb1
0000            138   _P0             DATA 0x80
0000            139   _P0MASK         DATA 0xfe
0000            140   _P0MAT          DATA 0xfd
0000            141   _P0MDIN         DATA 0xf1
0000            142   _P0MDOUT        DATA 0xa4
0000            143   _P0SKIP         DATA 0xd4
0000            144   _P1             DATA 0x90
0000            145   _P1MASK         DATA 0xee
0000            146   _P1MAT          DATA 0xed
0000            147   _P1MDIN         DATA 0xf2
0000            148   _P1MDOUT        DATA 0xa5
0000            149   _P1SKIP         DATA 0xd5
0000            150   _P2             DATA 0xa0
0000            151   _P2MASK         DATA 0xfc
0000            152   _P2MAT          DATA 0xfb
0000            153   _P2MDIN         DATA 0xf3
0000            154   _P2MDOUT        DATA 0xa6
0000            155   _P2SKIP         DATA 0xcc
0000            156   _P3             DATA 0xb0
0000            157   _P3MDIN         DATA 0xf4
0000            158   _P3MDOUT        DATA 0x9c
0000            159   _PCA0CENT       DATA 0x9e
0000            160   _PCA0CLR        DATA 0x9c
0000            161   _PCA0CN0        DATA 0xd8
0000            162   _PCA0CPH0       DATA 0xfc
0000            163   _PCA0CPH1       DATA 0xea
0000            164   _PCA0CPH2       DATA 0xec
0000            165   _PCA0CPH3       DATA 0xf5
0000            166   _PCA0CPH4       DATA 0x85
0000            167   _PCA0CPH5       DATA 0xde
0000            168   _PCA0CPL0       DATA 0xfb
0000            169   _PCA0CPL1       DATA 0xe9
0000            170   _PCA0CPL2       DATA 0xeb
0000            171   _PCA0CPL3       DATA 0xf4
0000            172   _PCA0CPL4       DATA 0x84
0000            173   _PCA0CPL5       DATA 0xdd
0000            174   _PCA0CPM0       DATA 0xda
0000            175   _PCA0CPM1       DATA 0xdb
0000            176   _PCA0CPM2       DATA 0xdc
0000            177   _PCA0CPM3       DATA 0xae
0000            178   _PCA0CPM4       DATA 0xaf
0000            179   _PCA0CPM5       DATA 0xcc
0000            180   _PCA0H          DATA 0xfa
0000            181   _PCA0L          DATA 0xf9
0000            182   _PCA0MD         DATA 0xd9
0000            183   _PCA0POL        DATA 0x96
0000            184   _PCA0PWM        DATA 0xf7
0000            185   _PCON0          DATA 0x87
0000            186   _PCON1          DATA 0xcd
0000            187   _PFE0CN         DATA 0xc1
0000            188   _PRTDRV         DATA 0xf6
0000            189   _PSCTL          DATA 0x8f
0000            190   _PSTAT0         DATA 0xaa
0000            191   _PSW            DATA 0xd0
0000            192   _REF0CN         DATA 0xd1
0000            193   _REG0CN         DATA 0xc9
0000            194   _REVID          DATA 0xb6
0000            195   _RSTSRC         DATA 0xef
0000            196   _SBCON1         DATA 0x94
0000            197   _SBRLH1         DATA 0x96
0000            198   _SBRLL1         DATA 0x95
0000            199   _SBUF           DATA 0x99
0000            200   _SBUF0          DATA 0x99
0000            201   _SBUF1          DATA 0x92
0000            202   _SCON           DATA 0x98
0000            203   _SCON0          DATA 0x98
0000            204   _SCON1          DATA 0xc8
0000            205   _SFRPAGE        DATA 0xa7
0000            206   _SFRPGCN        DATA 0xbc
0000            207   _SFRSTACK       DATA 0xd7
0000            208   _SMB0ADM        DATA 0xd6
0000            209   _SMB0ADR        DATA 0xd7
0000            210   _SMB0CF         DATA 0xc1
0000            211   _SMB0CN0        DATA 0xc0
0000            212   _SMB0DAT        DATA 0xc2
0000            213   _SMB0FCN0       DATA 0xc3
0000            214   _SMB0FCN1       DATA 0xc4
0000            215   _SMB0FCT        DATA 0xef
0000            216   _SMB0RXLN       DATA 0xc5
0000            217   _SMB0TC         DATA 0xac
0000            218   _SMOD1          DATA 0x93
0000            219   _SP             DATA 0x81
0000            220   _SPI0CFG        DATA 0xa1
0000            221   _SPI0CKR        DATA 0xa2
0000            222   _SPI0CN0        DATA 0xf8
0000            223   _SPI0DAT        DATA 0xa3
0000            224   _SPI0FCN0       DATA 0x9a
0000            225   _SPI0FCN1       DATA 0x9b
0000            226   _SPI0FCT        DATA 0xf7
0000            227   _SPI0PCF        DATA 0xdf
0000            228   _TCON           DATA 0x88
0000            229   _TH0            DATA 0x8c
0000            230   _TH1            DATA 0x8d
0000            231   _TL0            DATA 0x8a
0000            232   _TL1            DATA 0x8b
0000            233   _TMOD           DATA 0x89
0000            234   _TMR2CN0        DATA 0xc8
0000            235   _TMR2CN1        DATA 0xfd
0000            236   _TMR2H          DATA 0xcf
0000            237   _TMR2L          DATA 0xce
0000            238   _TMR2RLH        DATA 0xcb
0000            239   _TMR2RLL        DATA 0xca
0000            240   _TMR3CN0        DATA 0x91
0000            241   _TMR3CN1        DATA 0xfe
0000            242   _TMR3H          DATA 0x95
0000            243   _TMR3L          DATA 0x94
0000            244   _TMR3RLH        DATA 0x93
0000            245   _TMR3RLL        DATA 0x92
0000            246   _TMR4CN0        DATA 0x98
0000            247   _TMR4CN1        DATA 0xff
0000            248   _TMR4H          DATA 0xa5
0000            249   _TMR4L          DATA 0xa4
0000            250   _TMR4RLH        DATA 0xa3
0000            251   _TMR4RLL        DATA 0xa2
0000            252   _TMR5CN0        DATA 0xc0
0000            253   _TMR5CN1        DATA 0xf1
0000            254   _TMR5H          DATA 0xd5
0000            255   _TMR5L          DATA 0xd4
0000            256   _TMR5RLH        DATA 0xd3
0000            257   _TMR5RLL        DATA 0xd2
0000            258   _UART0PCF       DATA 0xd9
0000            259   _UART1FCN0      DATA 0x9d
0000            260   _UART1FCN1      DATA 0xd8
0000            261   _UART1FCT       DATA 0xfa
0000            262   _UART1LIN       DATA 0x9e
0000            263   _UART1PCF       DATA 0xda
0000            264   _VDM0CN         DATA 0xff
0000            265   _WDTCN          DATA 0x97
0000            266   _XBR0           DATA 0xe1
0000            267   _XBR1           DATA 0xe2
0000            268   _XBR2           DATA 0xe3
0000            269   _XOSC0CN        DATA 0x86
0000            270   _DPTR           DATA 0x8382
0000            271   _TMR2RL         DATA 0xcbca
0000            272   _TMR3RL         DATA 0x9392
0000            273   _TMR4RL         DATA 0xa3a2
0000            274   _TMR5RL         DATA 0xd3d2
0000            275   _TMR0           DATA 0x8c8a
0000            276   _TMR1           DATA 0x8d8b
0000            277   _TMR2           DATA 0xcfce
0000            278   _TMR3           DATA 0x9594
0000            279   _TMR4           DATA 0xa5a4
0000            280   _TMR5           DATA 0xd5d4
0000            281   _SBRL1          DATA 0x9695
0000            282   _PCA0           DATA 0xfaf9
0000            283   _PCA0CP0        DATA 0xfcfb
0000            284   _PCA0CP1        DATA 0xeae9
0000            285   _PCA0CP2        DATA 0xeceb
0000            286   _PCA0CP3        DATA 0xf5f4
0000            287   _PCA0CP4        DATA 0x8584
0000            288   _PCA0CP5        DATA 0xdedd
0000            289   _ADC0ASA        DATA 0xb6b5
0000            290   _ADC0GT         DATA 0xc4c3
0000            291   _ADC0           DATA 0xbebd
0000            292   _ADC0LT         DATA 0xc6c5
0000            293   _DAC0           DATA 0x8584
0000            294   _DAC1           DATA 0x8a89
0000            295   _DAC2           DATA 0x8c8b
0000            296   _DAC3           DATA 0x8e8d
0000            297   ;--------------------------------------------------------
0000            298   ; special function bits
0000            299   ;--------------------------------------------------------
0000            300   _ACC_0          BIT 0xe0
0000            301   _ACC_1          BIT 0xe1
0000            302   _ACC_2          BIT 0xe2
0000            303   _ACC_3          BIT 0xe3
0000            304   _ACC_4          BIT 0xe4
0000            305   _ACC_5          BIT 0xe5
0000            306   _ACC_6          BIT 0xe6
0000            307   _ACC_7          BIT 0xe7
0000            308   _TEMPE          BIT 0xe8
0000            309   _ADGN0          BIT 0xe9
0000            310   _ADGN1          BIT 0xea
0000            311   _ADWINT         BIT 0xeb
0000            312   _ADBUSY         BIT 0xec
0000            313   _ADINT          BIT 0xed
0000            314   _IPOEN          BIT 0xee
0000            315   _ADEN           BIT 0xef
0000            316   _B_0            BIT 0xf0
0000            317   _B_1            BIT 0xf1
0000            318   _B_2            BIT 0xf2
0000            319   _B_3            BIT 0xf3
0000            320   _B_4            BIT 0xf4
0000            321   _B_5            BIT 0xf5
0000            322   _B_6            BIT 0xf6
0000            323   _B_7            BIT 0xf7
0000            324   _C0FIF          BIT 0xe8
0000            325   _C0RIF          BIT 0xe9
0000            326   _C1FIF          BIT 0xea
0000            327   _C1RIF          BIT 0xeb
0000            328   _C2FIF          BIT 0xec
0000            329   _C2RIF          BIT 0xed
0000            330   _C3FIF          BIT 0xee
0000            331   _C3RIF          BIT 0xef
0000            332   _D1SRC0         BIT 0x88
0000            333   _D1SRC1         BIT 0x89
0000            334   _D1AMEN         BIT 0x8a
0000            335   _D01REFSL       BIT 0x8b
0000            336   _D3SRC0         BIT 0x8c
0000            337   _D3SRC1         BIT 0x8d
0000            338   _D3AMEN         BIT 0x8e
0000            339   _D23REFSL       BIT 0x8f
0000            340   _D0UDIS         BIT 0x98
0000            341   _D1UDIS         BIT 0x99
0000            342   _D2UDIS         BIT 0x9a
0000            343   _D3UDIS         BIT 0x9b
0000            344   _EX0            BIT 0xa8
0000            345   _ET0            BIT 0xa9
0000            346   _EX1            BIT 0xaa
0000            347   _ET1            BIT 0xab
0000            348   _ES0            BIT 0xac
0000            349   _ET2            BIT 0xad
0000            350   _ESPI0          BIT 0xae
0000            351   _EA             BIT 0xaf
0000            352   _PX0            BIT 0xb8
0000            353   _PT0            BIT 0xb9
0000            354   _PX1            BIT 0xba
0000            355   _PT1            BIT 0xbb
0000            356   _PS0            BIT 0xbc
0000            357   _PT2            BIT 0xbd
0000            358   _PSPI0          BIT 0xbe
0000            359   _P0_0           BIT 0x80
0000            360   _P0_1           BIT 0x81
0000            361   _P0_2           BIT 0x82
0000            362   _P0_3           BIT 0x83
0000            363   _P0_4           BIT 0x84
0000            364   _P0_5           BIT 0x85
0000            365   _P0_6           BIT 0x86
0000            366   _P0_7           BIT 0x87
0000            367   _P1_0           BIT 0x90
0000            368   _P1_1           BIT 0x91
0000            369   _P1_2           BIT 0x92
0000            370   _P1_3           BIT 0x93
0000            371   _P1_4           BIT 0x94
0000            372   _P1_5           BIT 0x95
0000            373   _P1_6           BIT 0x96
0000            374   _P1_7           BIT 0x97
0000            375   _P2_0           BIT 0xa0
0000            376   _P2_1           BIT 0xa1
0000            377   _P2_2           BIT 0xa2
0000            378   _P2_3           BIT 0xa3
0000            379   _P2_4           BIT 0xa4
0000            380   _P2_5           BIT 0xa5
0000            381   _P2_6           BIT 0xa6
0000            382   _P3_0           BIT 0xb0
0000            383   _P3_1           BIT 0xb1
0000            384   _P3_2           BIT 0xb2
0000            385   _P3_3           BIT 0xb3
0000            386   _P3_4           BIT 0xb4
0000            387   _P3_7           BIT 0xb7
0000            388   _CCF0           BIT 0xd8
0000            389   _CCF1           BIT 0xd9
0000            390   _CCF2           BIT 0xda
0000            391   _CCF3           BIT 0xdb
0000            392   _CCF4           BIT 0xdc
0000            393   _CCF5           BIT 0xdd
0000            394   _CR             BIT 0xde
0000            395   _CF             BIT 0xdf
0000            396   _PARITY         BIT 0xd0
0000            397   _F1             BIT 0xd1
0000            398   _OV             BIT 0xd2
0000            399   _RS0            BIT 0xd3
0000            400   _RS1            BIT 0xd4
0000            401   _F0             BIT 0xd5
0000            402   _AC             BIT 0xd6
0000            403   _CY             BIT 0xd7
0000            404   _RI             BIT 0x98
0000            405   _TI             BIT 0x99
0000            406   _RB8            BIT 0x9a
0000            407   _TB8            BIT 0x9b
0000            408   _REN            BIT 0x9c
0000            409   _CE             BIT 0x9d
0000            410   _SMODE          BIT 0x9e
0000            411   _RI1            BIT 0xc8
0000            412   _TI1            BIT 0xc9
0000            413   _RBX1           BIT 0xca
0000            414   _TBX1           BIT 0xcb
0000            415   _REN1           BIT 0xcc
0000            416   _PERR1          BIT 0xcd
0000            417   _OVR1           BIT 0xce
0000            418   _SI             BIT 0xc0
0000            419   _ACK            BIT 0xc1
0000            420   _ARBLOST        BIT 0xc2
0000            421   _ACKRQ          BIT 0xc3
0000            422   _STO            BIT 0xc4
0000            423   _STA            BIT 0xc5
0000            424   _TXMODE         BIT 0xc6
0000            425   _MASTER         BIT 0xc7
0000            426   _SPIEN          BIT 0xf8
0000            427   _TXNF           BIT 0xf9
0000            428   _NSSMD0         BIT 0xfa
0000            429   _NSSMD1         BIT 0xfb
0000            430   _RXOVRN         BIT 0xfc
0000            431   _MODF           BIT 0xfd
0000            432   _WCOL           BIT 0xfe
0000            433   _SPIF           BIT 0xff
0000            434   _IT0            BIT 0x88
0000            435   _IE0            BIT 0x89
0000            436   _IT1            BIT 0x8a
0000            437   _IE1            BIT 0x8b
0000            438   _TR0            BIT 0x8c
0000            439   _TF0            BIT 0x8d
0000            440   _TR1            BIT 0x8e
0000            441   _TF1            BIT 0x8f
0000            442   _T2XCLK0        BIT 0xc8
0000            443   _T2XCLK1        BIT 0xc9
0000            444   _TR2            BIT 0xca
0000            445   _T2SPLIT        BIT 0xcb
0000            446   _TF2CEN         BIT 0xcc
0000            447   _TF2LEN         BIT 0xcd
0000            448   _TF2L           BIT 0xce
0000            449   _TF2H           BIT 0xcf
0000            450   _T4XCLK0        BIT 0x98
0000            451   _T4XCLK1        BIT 0x99
0000            452   _TR4            BIT 0x9a
0000            453   _T4SPLIT        BIT 0x9b
0000            454   _TF4CEN         BIT 0x9c
0000            455   _TF4LEN         BIT 0x9d
0000            456   _TF4L           BIT 0x9e
0000            457   _TF4H           BIT 0x9f
0000            458   _T5XCLK0        BIT 0xc0
0000            459   _T5XCLK1        BIT 0xc1
0000            460   _TR5            BIT 0xc2
0000            461   _T5SPLIT        BIT 0xc3
0000            462   _TF5CEN         BIT 0xc4
0000            463   _TF5LEN         BIT 0xc5
0000            464   _TF5L           BIT 0xc6
0000            465   _TF5H           BIT 0xc7
0000            466   _RIE            BIT 0xd8
0000            467   _RXTO0          BIT 0xd9
0000            468   _RXTO1          BIT 0xda
0000            469   _RFRQ           BIT 0xdb
0000            470   _TIE            BIT 0xdc
0000            471   _TXHOLD         BIT 0xdd
0000            472   _TXNF1          BIT 0xde
0000            473   _TFRQ           BIT 0xdf
0000            474   ;--------------------------------------------------------
0000            475   ; overlayable register banks
0000            476   ;--------------------------------------------------------
0000            477            rbank0 segment data overlay
0000            478   ;--------------------------------------------------------
0000            479   ; internal ram data
0000            480   ;--------------------------------------------------------
0000            481            rseg R_DSEG
0000            482   _counter:
0000            483            ds 1
0001            484   _counter2:
0001            485            ds 1
0002            486   _command:
0002            487            ds 1
0003            488   _flag:
0003            489            ds 1
0004            490   ;--------------------------------------------------------
0004            491   ; overlayable items in internal ram 
0004            492   ;--------------------------------------------------------
0000            493            rseg R_OSEG
0000            494   ;--------------------------------------------------------
0000            495   ; indirectly addressable internal ram data
0000            496   ;--------------------------------------------------------
0000            497            rseg R_ISEG
0000            498   ;--------------------------------------------------------
0000            499   ; absolute internal ram data
0000            500   ;--------------------------------------------------------
0000            501            DSEG
0000            502   ;--------------------------------------------------------
0000            503   ; bit data
0000            504   ;--------------------------------------------------------
0000            505            rseg R_BSEG
0000            506   ;--------------------------------------------------------
0000            507   ; paged external ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_PSEG
0000            510   ;--------------------------------------------------------
0000            511   ; external ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_XSEG
0000            514   ;--------------------------------------------------------
0000            515   ; absolute external ram data
0000            516   ;--------------------------------------------------------
0000            517            XSEG
0000            518   ;--------------------------------------------------------
0000            519   ; external initialized ram data
0000            520   ;--------------------------------------------------------
0000            521            rseg R_IXSEG
0000            522            rseg R_HOME
0000            523            rseg R_GSINIT
0000            524            rseg R_CSEG
0000            525   ;--------------------------------------------------------
0000            526   ; Reset entry point and interrupt vectors
0000            527   ;--------------------------------------------------------
0000            528            CSEG at 0x0000
0000 020100     529            ljmp    _crt0
000B            530            CSEG at 0x000b
000B 020100     531            ljmp    _Timer0_ISR
002B            532            CSEG at 0x002b
002B 020100     533            ljmp    _Timer2_ISR
002E            534   ;--------------------------------------------------------
002E            535   ; global & static initialisations
002E            536   ;--------------------------------------------------------
0000            537            rseg R_HOME
0000            538            rseg R_GSINIT
0000            539            rseg R_GSINIT
0000            540   ;--------------------------------------------------------
0000            541   ; data variables initialization
0000            542   ;--------------------------------------------------------
0000            543            rseg R_DINIT
0000            544            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            545   ;--------------------------------------------------------
0000            546   ; code
0000            547   ;--------------------------------------------------------
0000            548            rseg R_CSEG
0000            549   ;------------------------------------------------------------
0000            550   ;Allocation info for local variables in function '_c51_external_startup'
0000            551   ;------------------------------------------------------------
0000            552   ;------------------------------------------------------------
0000            553   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:25: char _c51_external_startup (void)
0000            554   ;        -----------------------------------------
0000            555   ;         function _c51_external_startup
0000            556   ;        -----------------------------------------
0000            557   __c51_external_startup:
0000            558            using   0
0000            559   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:28: SFRPAGE = 0x00;
0000 75A700     560            mov     _SFRPAGE,#0x00
0003            561   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:29: WDTCN = 0xDE; //First key
0003 7597DE     562            mov     _WDTCN,#0xDE
0006            563   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:30: WDTCN = 0xAD; //Second key
0006 7597AD     564            mov     _WDTCN,#0xAD
0009            565   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:32: VDM0CN |= 0x80;
0009 43FF80     566            orl     _VDM0CN,#0x80
000C            567   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:33: RSTSRC = 0x02;
000C 75EF02     568            mov     _RSTSRC,#0x02
000F            569   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:40: SFRPAGE = 0x10;
000F 75A710     570            mov     _SFRPAGE,#0x10
0012            571   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:41: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     572            mov     _PFE0CN,#0x20
0015            573   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:42: SFRPAGE = 0x00;
0015 75A700     574            mov     _SFRPAGE,#0x00
0018            575   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:63: CLKSEL = 0x00;
0018 75A900     576            mov     _CLKSEL,#0x00
001B            577   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:64: CLKSEL = 0x00;
001B 75A900     578            mov     _CLKSEL,#0x00
001E            579   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:65: while ((CLKSEL & 0x80) == 0);
001E            580   L002001?:
001E E5A9       581            mov     a,_CLKSEL
0020 30E700     582            jnb     acc.7,L002001?
0023            583   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:66: CLKSEL = 0x03;
0023 75A903     584            mov     _CLKSEL,#0x03
0026            585   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:67: CLKSEL = 0x03;
0026 75A903     586            mov     _CLKSEL,#0x03
0029            587   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:68: while ((CLKSEL & 0x80) == 0);
0029            588   L002004?:
0029 E5A9       589            mov     a,_CLKSEL
002B 30E780     590            jnb     acc.7,L002004?
002E            591   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:73: P2MDOUT|=0b_0000_0001;
002E 43A601     592            orl     _P2MDOUT,#0x01
0031            593   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:74: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
0031 43A410     594            orl     _P0MDOUT,#0x10
0034            595   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:75: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     596            mov     _XBR0,#0x01
0037            597   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:76: XBR1     = 0X10; // Enable T0 on P0.0
0037 75E210     598            mov     _XBR1,#0x10
003A            599   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:77: XBR2     = 0x40; // Enable crossbar and weak pull-ups
003A 75E340     600            mov     _XBR2,#0x40
003D            601   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:83: SCON0 = 0x10;
003D 759810     602            mov     _SCON0,#0x10
0040            603   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:84: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
0040 858E8E     604            mov     _CKCON0,_CKCON0
0043            605   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:85: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0043 758DE6     606            mov     _TH1,#0xE6
0046            607   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:86: TL1 = TH1;      // Init Timer1
0046 858D8B     608            mov     _TL1,_TH1
0049            609   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:87: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0049 53890F     610            anl     _TMOD,#0x0F
004C            611   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:88: TMOD |=  0x20;                       
004C 438920     612            orl     _TMOD,#0x20
004F            613   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:89: TR1 = 1; // START Timer1
004F D28E       614            setb    _TR1
0051            615   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:90: TI = 1;  // Indicate TX0 ready
0051 D299       616            setb    _TI
0053            617   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:93: TR0=0;
0053 C28C       618            clr     _TR0
0055            619   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:94: TF0=0;
0055 C28D       620            clr     _TF0
0057            621   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:95: CKCON0|=0b_0000_0100; // Timer 0 uses the system clock
0057 438E04     622            orl     _CKCON0,#0x04
005A            623   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:96: TMOD&=0xf0;
005A 5389F0     624            anl     _TMOD,#0xF0
005D            625   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:97: TMOD|=0x01; // Timer 0 in mode 1: 16-bit timer
005D 438901     626            orl     _TMOD,#0x01
0060            627   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:99: TMR0=65536L-(SYSCLK/(2*TIMER_0_FREQ));
0060 758AF0     628            mov     _TMR0,#0xF0
0063 758CF1     629            mov     (_TMR0 >> 8),#0xF1
0066            630   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:100: ET0=1;     // Enable Timer0 interrupts
0066 D2A9       631            setb    _ET0
0068            632   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:106: TMR2CN0=0x00;   // Stop Timer2; Clear TF2;
0068 75C800     633            mov     _TMR2CN0,#0x00
006B            634   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:107: CKCON0|=0b_0001_0000;
006B 438E10     635            orl     _CKCON0,#0x10
006E            636   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:108: TMR2RL=(-(SYSCLK/(2*DEFAULT_F))); // Initialize reload value
006E 75CA4D     637            mov     _TMR2RL,#0x4D
0071 75CBFC     638            mov     (_TMR2RL >> 8),#0xFC
0074            639   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:109: TMR2=0xffff;   // Set to reload immediately
0074 75CEFF     640            mov     _TMR2,#0xFF
0077 75CFFF     641            mov     (_TMR2 >> 8),#0xFF
007A            642   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:110: ET2=1;         // Enable Timer2 interrupts
007A D2AD       643            setb    _ET2
007C            644   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:111: TR2=0;         // Start Timer2
007C C2CA       645            clr     _TR2
007E            646   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:112: TR0=0;     // Start Timer0
007E C28C       647            clr     _TR0
0080            648   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:113: EA=1; // Global interrupt enable
0080 D2AF       649            setb    _EA
0082            650   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:115: return 0;
0082 758200     651            mov     dpl,#0x00
0085 22         652            ret
0086            653   ;------------------------------------------------------------
0086            654   ;Allocation info for local variables in function 'Timer2_ISR'
0086            655   ;------------------------------------------------------------
0086            656   ;------------------------------------------------------------
0086            657   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:118: void Timer2_ISR (void) interrupt INTERRUPT_TIMER2
0086            658   ;        -----------------------------------------
0086            659   ;         function Timer2_ISR
0086            660   ;        -----------------------------------------
0086            661   _Timer2_ISR:
0086            662   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:120: TF2H = 0; // Clear Timer2 interrupt flag
0086 C2CF       663            clr     _TF2H
0088            664   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:122: OUT0= !OUT0;           
0088 B2A0       665            cpl     _P2_0
008A 32         666            reti
008B            667   ;        eliminated unneeded push/pop psw
008B            668   ;        eliminated unneeded push/pop dpl
008B            669   ;        eliminated unneeded push/pop dph
008B            670   ;        eliminated unneeded push/pop b
008B            671   ;        eliminated unneeded push/pop acc
008B            672   ;------------------------------------------------------------
008B            673   ;Allocation info for local variables in function 'Timer0_ISR'
008B            674   ;------------------------------------------------------------
008B            675   ;------------------------------------------------------------
008B            676   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:124: void Timer0_ISR (void) interrupt INTERRUPT_TIMER0
008B            677   ;        -----------------------------------------
008B            678   ;         function Timer0_ISR
008B            679   ;        -----------------------------------------
008B            680   _Timer0_ISR:
008B C0E0       681            push    acc
008D C0D0       682            push    psw
008F 75D000     683            mov     psw,#0x00
0092            684   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:126: SFRPAGE=0x0;
0092 75A700     685            mov     _SFRPAGE,#0x00
0095            686   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:128: TMR0=0x10000L-(SYSCLK/(2*TIMER_0_FREQ));
0095 758AF0     687            mov     _TMR0,#0xF0
0098 758CF1     688            mov     (_TMR0 >> 8),#0xF1
009B            689   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:129: counter++;
009B 05C0       690            inc     _counter
009D            691   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:130: counter2++;
009D 0580       692            inc     _counter2
009F            693   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:131: if(command == 2 && counter == 26)
009F 7402       694            mov     a,#0x02
00A1 B54040     695            cjne    a,_command,L004002?
00A4 741A       696            mov     a,#0x1A
00A6 B5C040     697            cjne    a,_counter,L004002?
00A9            698   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:133: TMR2CN0=0x00;
00A9 75C800     699            mov     _TMR2CN0,#0x00
00AC            700   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:134: command = 0;
00AC 754000     701            mov     _command,#0x00
00AF            702   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:135: counter = 0;
00AF 75C000     703            mov     _counter,#0x00
00B2            704   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:136: TR0=0; 
00B2 C28C       705            clr     _TR0
00B4            706   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:137: TR2=0; 
00B4 C2CA       707            clr     _TR2
00B6            708   L004002?:
00B6            709   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:139: if(command == 3 && counter == 23)
00B6 7403       710            mov     a,#0x03
00B8 B54080     711            cjne    a,_command,L004005?
00BB 7417       712            mov     a,#0x17
00BD B5C080     713            cjne    a,_counter,L004005?
00C0            714   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:141: TMR2CN0=0x00;
00C0 75C800     715            mov     _TMR2CN0,#0x00
00C3            716   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:142: command = 0;
00C3 754000     717            mov     _command,#0x00
00C6            718   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:143: counter = 0;
00C6 75C000     719            mov     _counter,#0x00
00C9            720   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:144: TR0=0; 
00C9 C28C       721            clr     _TR0
00CB            722   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:145: TR2=0; 
00CB C2CA       723            clr     _TR2
00CD            724   L004005?:
00CD            725   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:147: if(command == 4 && counter == 20)
00CD 7404       726            mov     a,#0x04
00CF B540C0     727            cjne    a,_command,L004008?
00D2 7414       728            mov     a,#0x14
00D4 B5C0C0     729            cjne    a,_counter,L004008?
00D7            730   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:149: TMR2CN0=0x00;
00D7 75C800     731            mov     _TMR2CN0,#0x00
00DA            732   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:150: command = 0;
00DA 754000     733            mov     _command,#0x00
00DD            734   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:151: counter = 0;
00DD 75C000     735            mov     _counter,#0x00
00E0            736   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:152: TR0=0; 
00E0 C28C       737            clr     _TR0
00E2            738   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:153: TR2=0; 
00E2 C2CA       739            clr     _TR2
00E4            740   L004008?:
00E4            741   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:155: if(command == 5 && counter == 17)
00E4 7405       742            mov     a,#0x05
00E6 B54000     743            cjne    a,_command,L004013?
00E9 7411       744            mov     a,#0x11
00EB B5C000     745            cjne    a,_counter,L004013?
00EE            746   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:157: TMR2CN0=0x00;
00EE 75C800     747            mov     _TMR2CN0,#0x00
00F1            748   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:158: command = 0;
00F1 754000     749            mov     _command,#0x00
00F4            750   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:159: counter = 0;
00F4 75C000     751            mov     _counter,#0x00
00F7            752   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:160: TR0=0; 
00F7 C28C       753            clr     _TR0
00F9            754   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:161: TR2=0; 
00F9 C2CA       755            clr     _TR2
00FB            756   L004013?:
00FB D0D0       757            pop     psw
00FD D0E0       758            pop     acc
00FF 32         759            reti
0100            760   ;        eliminated unneeded push/pop dpl
0100            761   ;        eliminated unneeded push/pop dph
0100            762   ;        eliminated unneeded push/pop b
0100            763   ;------------------------------------------------------------
0100            764   ;Allocation info for local variables in function 'main'
0100            765   ;------------------------------------------------------------
0100            766   ;------------------------------------------------------------
0100            767   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:167: void main (void)
0100            768   ;        -----------------------------------------
0100            769   ;         function main
0100            770   ;        -----------------------------------------
0100            771   _main:
0100            772   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:169: command1 = 1;
0100 D2A1       773            setb    _P2_1
0102            774   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:170: command2 = 1;
0102 D2A2       775            setb    _P2_2
0104            776   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:171: command3 = 1;
0104 D2A3       777            setb    _P2_3
0106            778   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:172: command4 = 1;
0106 D2A4       779            setb    _P2_4
0108            780   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:173: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
0108 7440       781            mov     a,#__str_0
010A C0E0       782            push    acc
010C 74B2       783            mov     a,#(__str_0 >> 8)
010E C0E0       784            push    acc
0110 7480       785            mov     a,#0x80
0112 C0E0       786            push    acc
0114 120100     787            lcall   _printf
0117 1581       788            dec     sp
0119 1581       789            dec     sp
011B 1581       790            dec     sp
011D            791   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:175: "Check pins P2.0 and P2.1 with the oscilloscope.\r\n");
011D 7400       792            mov     a,#__str_1
011F C0E0       793            push    acc
0121 74B3       794            mov     a,#(__str_1 >> 8)
0123 C0E0       795            push    acc
0125 7480       796            mov     a,#0x80
0127 C0E0       797            push    acc
0129 120100     798            lcall   _printf
012C 1581       799            dec     sp
012E 1581       800            dec     sp
0130 1581       801            dec     sp
0132            802   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:177: TR2=0; 
0132 C2CA       803            clr     _TR2
0134            804   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:179: while(1)
0134            805   L005027?:
0134            806   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:182: if(command1 == 0)
0134 20A180     807            jb      _P2_1,L005002?
0137            808   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:185: command = 2;
0137 754002     809            mov     _command,#0x02
013A            810   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:186: counter2 =0;
013A 758000     811            mov     _counter2,#0x00
013D            812   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:187: counter =0;
013D 75C000     813            mov     _counter,#0x00
0140            814   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:188: TR2=1;
0140 D2CA       815            setb    _TR2
0142            816   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:189: TR0=1; 
0142 D28C       817            setb    _TR0
0144            818   L005002?:
0144            819   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:191: if(command2 == 0)
0144 20A2C0     820            jb      _P2_2,L005004?
0147            821   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:194: command = 3;
0147 754003     822            mov     _command,#0x03
014A            823   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:195: counter =0;
014A 75C000     824            mov     _counter,#0x00
014D            825   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:196: counter2 =0;
014D 758000     826            mov     _counter2,#0x00
0150            827   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:197: TR2=1;
0150 D2CA       828            setb    _TR2
0152            829   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:198: TR0=1; 
0152 D28C       830            setb    _TR0
0154            831   L005004?:
0154            832   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:200: if(command3 == 0)
0154 20A300     833            jb      _P2_3,L005006?
0157            834   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:203: command = 4;
0157 754004     835            mov     _command,#0x04
015A            836   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:204: counter =0;
015A 75C000     837            mov     _counter,#0x00
015D            838   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:205: counter2 =0;
015D 758000     839            mov     _counter2,#0x00
0160            840   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:206: TR2=1;
0160 D2CA       841            setb    _TR2
0162            842   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:207: TR0=1; 
0162 D28C       843            setb    _TR0
0164            844   L005006?:
0164            845   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:209: if(command4 == 0)
0164 20A440     846            jb      _P2_4,L005008?
0167            847   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:212: command = 5;
0167 754005     848            mov     _command,#0x05
016A            849   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:213: counter =0;
016A 75C000     850            mov     _counter,#0x00
016D            851   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:214: counter2 =0;
016D 758000     852            mov     _counter2,#0x00
0170            853   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:215: TR2=1;
0170 D2CA       854            setb    _TR2
0172            855   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:216: TR0=1; 
0172 D28C       856            setb    _TR0
0174            857   L005008?:
0174            858   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:218: if(input == 0)
0174 209740     859            jb      _P1_7,L005027?
0177            860   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:220: while(input == 0);
0177            861   L005009?:
0177 309780     862            jnb     _P1_7,L005009?
017A            863   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:221: TR0=0;
017A C28C       864            clr     _TR0
017C            865   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:222: printf("%d",counter2);
017C AA80       866            mov     r2,_counter2
017E E580       867            mov     a,_counter2
0180 33         868            rlc     a
0181 95E0       869            subb    a,acc
0183 FB         870            mov     r3,a
0184 C002       871            push    ar2
0186 C003       872            push    ar3
0188 74C0       873            mov     a,#__str_2
018A C0E0       874            push    acc
018C 74B4       875            mov     a,#(__str_2 >> 8)
018E C0E0       876            push    acc
0190 7480       877            mov     a,#0x80
0192 C0E0       878            push    acc
0194 120100     879            lcall   _printf
0197 E581       880            mov     a,sp
0199 24FB       881            add     a,#0xfb
019B F581       882            mov     sp,a
019D            883   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:223: if(counter2 <= 27 && counter2 >= 25)
019D C3         884            clr     c
019E 749B       885            mov     a,#(0x1B ^ 0x80)
01A0 8580F0     886            mov     b,_counter2
01A3 63F080     887            xrl     b,#0x80
01A6 95F0       888            subb    a,b
01A8 4001       889            jc      L005013?
01AA E580       890            mov     a,_counter2
01AC 6480       891            xrl     a,#0x80
01AE 9499       892            subb    a,#0x99
01B0 4001       893            jc      L005013?
01B2            894   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:224: printf("Command1\n");
01B2 7480       895            mov     a,#__str_3
01B4 C0E0       896            push    acc
01B6 74B5       897            mov     a,#(__str_3 >> 8)
01B8 C0E0       898            push    acc
01BA 7480       899            mov     a,#0x80
01BC C0E0       900            push    acc
01BE 120100     901            lcall   _printf
01C1 1581       902            dec     sp
01C3 1581       903            dec     sp
01C5 1581       904            dec     sp
01C7            905   L005013?:
01C7            906   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:225: if(counter2 <= 24 && counter2 >= 22)
01C7 C3         907            clr     c
01C8 7498       908            mov     a,#(0x18 ^ 0x80)
01CA 8580F0     909            mov     b,_counter2
01CD 63F080     910            xrl     b,#0x80
01D0 95F0       911            subb    a,b
01D2 4001       912            jc      L005016?
01D4 E580       913            mov     a,_counter2
01D6 6480       914            xrl     a,#0x80
01D8 9496       915            subb    a,#0x96
01DA 4001       916            jc      L005016?
01DC            917   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:226: printf("Command2\n");
01DC 7400       918            mov     a,#__str_4
01DE C0E0       919            push    acc
01E0 74B6       920            mov     a,#(__str_4 >> 8)
01E2 C0E0       921            push    acc
01E4 7480       922            mov     a,#0x80
01E6 C0E0       923            push    acc
01E8 120100     924            lcall   _printf
01EB 1581       925            dec     sp
01ED 1581       926            dec     sp
01EF 1581       927            dec     sp
01F1            928   L005016?:
01F1            929   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:227: if(counter2 <= 21 && counter2 >= 19)
01F1 C3         930            clr     c
01F2 7495       931            mov     a,#(0x15 ^ 0x80)
01F4 8580F0     932            mov     b,_counter2
01F7 63F080     933            xrl     b,#0x80
01FA 95F0       934            subb    a,b
01FC 4001       935            jc      L005019?
01FE E580       936            mov     a,_counter2
0200 6480       937            xrl     a,#0x80
0202 9493       938            subb    a,#0x93
0204 4001       939            jc      L005019?
0206            940   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:228: printf("Command3\n");
0206 7480       941            mov     a,#__str_5
0208 C0E0       942            push    acc
020A 74B6       943            mov     a,#(__str_5 >> 8)
020C C0E0       944            push    acc
020E 7480       945            mov     a,#0x80
0210 C0E0       946            push    acc
0212 120100     947            lcall   _printf
0215 1581       948            dec     sp
0217 1581       949            dec     sp
0219 1581       950            dec     sp
021B            951   L005019?:
021B            952   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:229: if(counter2 <= 18 && counter2 >= 16)
021B C3         953            clr     c
021C 7492       954            mov     a,#(0x12 ^ 0x80)
021E 8580F0     955            mov     b,_counter2
0221 63F080     956            xrl     b,#0x80
0224 95F0       957            subb    a,b
0226 5001       958            jnc     L005058?
0228 020100     959            ljmp    L005027?
022B            960   L005058?:
022B C3         961            clr     c
022C E580       962            mov     a,_counter2
022E 6480       963            xrl     a,#0x80
0230 9490       964            subb    a,#0x90
0232 5001       965            jnc     L005059?
0234 020100     966            ljmp    L005027?
0237            967   L005059?:
0237            968   ;        C:\Users\oconn\OneDrive\Documents\GitHub\EM-Robot\efm8-sample-code\square.c:230: printf("Command4\n");
0237 7440       969            mov     a,#__str_6
0239 C0E0       970            push    acc
023B 74B7       971            mov     a,#(__str_6 >> 8)
023D C0E0       972            push    acc
023F 7480       973            mov     a,#0x80
0241 C0E0       974            push    acc
0243 120100     975            lcall   _printf
0246 1581       976            dec     sp
0248 1581       977            dec     sp
024A 1581       978            dec     sp
024C 020100     979            ljmp    L005027?
024F            980            rseg R_CSEG
024F            981   
0000            982            rseg R_XINIT
0000            983   
0000            984            rseg R_CONST
0000            985   __str_0:
0000 1B         986            db 0x1B
0001 5B324A     987            db '[2J'
0004 00         988            db 0x00
0005            989   __str_1:
0005 56617269   990            db 'Variable frequency generator for the EFM8LB1.'
     61626C65
     20667265
     7175656E
     63792067
     656E6572
     61746F72
     20666F72
     20746865
     2045464D
     384C4231
     2E
0032 0D         991            db 0x0D
0033 0A         992            db 0x0A
0034 43686563   993            db 'Check pins P2'
     6B207069
     6E732050
     32
0041 2E302061   994            db '.0 and P2.1 with the oscilloscope.'
     6E642050
     322E3120
     77697468
     20746865
     206F7363
     696C6C6F
     73636F70
     652E
0063 0D         995            db 0x0D
0064 0A         996            db 0x0A
0065 00         997            db 0x00
0066            998   __str_2:
0066 2564       999            db '%d'
0068 00        1000            db 0x00
0069           1001   __str_3:
0069 436F6D6D  1002            db 'Command1'
     616E6431
0071 0A        1003            db 0x0A
0072 00        1004            db 0x00
0073           1005   __str_4:
0073 436F6D6D  1006            db 'Command2'
     616E6432
007B 0A        1007            db 0x0A
007C 00        1008            db 0x00
007D           1009   __str_5:
007D 436F6D6D  1010            db 'Command3'
     616E6433
0085 0A        1011            db 0x0A
0086 00        1012            db 0x00
0087           1013   __str_6:
0087 436F6D6D  1014            db 'Command4'
     616E6434
008F 0A        1015            db 0x0A
0090 00        1016            db 0x00
0091           1017   
002E           1018            CSEG
002E           1019   
002E           1020   end
